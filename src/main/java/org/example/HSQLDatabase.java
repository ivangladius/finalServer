package org.example;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.sql.Statement;
import java.sql.Timestamp;

import oracle.ucp.jdbc.PoolDataSource;
import oracle.ucp.jdbc.PoolDataSourceFactory;
import oracle.ucp.jdbc.JDBCConnectionPoolStatistics;

public class HSQLDatabase implements Database {

	static PoolDataSource pds;
	Connection connection;
	public static HSQLDatabase instance = null;

	public static Connection createHSQLDBConnection() throws SQLException {

		try {

			// Creates a new PoolDataSource using the factory

			pds = PoolDataSourceFactory.getPoolDataSource();

			// Setting up the getConnection() information

			pds.setConnectionPoolName("HSQLDBConnection");
			pds.setURL(
					"jdbc:hsqldb:file:~/DB_TEST/; hsqldb.lock_file = false; shutdown = true;");
			pds.setConnectionFactoryClassName("org.hsqldb.jdbc.JDBCDriver");
			pds.setUser("myDB");
			pds.setPassword("PK313");

			// Setting the initial getConnection() properties

			pds.setInitialPoolSize(10);
			pds.setMaxPoolSize(10);
			pds.setMinPoolSize(2);

			return pds.getConnection();

		} catch (SQLException e) {

			System.out.println("No more connections are availabe");
			return null;

		}
	}

	public static HSQLDatabase getInstance() throws SQLException, ClassNotFoundException {

		// Singleton pattern implementation
		// Only one instance will be created and will be reused for each object

		if (instance == null) {

			synchronized (Database.class) {

				instance = new HSQLDatabase();
				instance.queryCreateTables();

			}
		}

		return instance;
	}

	@Override
	public void databaseConnectionPoolStatistics() {

		JDBCConnectionPoolStatistics statistics = (JDBCConnectionPoolStatistics) pds.getStatistics();

		if (statistics != null) {

			int borrowedConnections = statistics.getBorrowedConnectionsCount();
			int availableConnections = statistics.getAvailableConnectionsCount();

			System.out.println("Borrowed Connections: " + borrowedConnections);
			System.out.println("Available Connections: " + availableConnections);

		} else {
			System.out.println("Statistics are not available");
		}

	}

	@Override
	public ResultSet executeQuery(String query) throws SQLException {

		try {

			Statement statement = connection.createStatement();
			ResultSet result = statement.executeQuery(query);

			return result;

		} catch (SQLException e) {

			e.printStackTrace();
			return null;

		}
	}

	@Override
	public void queryCreateTables() throws SQLException {

		try {

			connection = createHSQLDBConnection();

			PreparedStatement ps1 = connection.prepareStatement(
					"CREATE TABLE IF NOT EXISTS USERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, User_Name VARCHAR(25) NOT NULL, Email VARCHAR(50) NOT NULL, Password VARCHAR(15) NOT NULL, Profile_Picture VARCHAR(255));");
			PreparedStatement ps2 = connection.prepareStatement(
					"CREATE TABLE IF NOT EXISTS CHATS (Message_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, Sender_ID INT NOT NULL, Message VARCHAR(255) NOT NULL, Receiver_ID INT NOT NULL, Time TIMESTAMP NOT NULL, FOREIGN KEY (Sender_ID) references users(ID) ON DELETE CASCADE, FOREIGN KEY (RECEIVER_ID) REFERENCES users(ID) ON DELETE CASCADE);");

			ps1.executeUpdate();
			ps2.executeUpdate();

		} catch (SQLException e) {

			e.printStackTrace();

		}
	}

	@Override
	public String queryFindIDByEmail(String email) {

		try {

			PreparedStatement ps = connection.prepareStatement("SELECT * FROM USERS WHERE EMAIL = ?");
			ps.setString(1, email);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {

				return rs.getString(1); // If the email already exists in the database

			}

		} catch (SQLException e) {

			e.printStackTrace();

		}

		return null; // If email doesn't exist in the database
	}

	@Override
	public String queryFindIDByUsername(String username) {

		try {

			PreparedStatement ps = connection.prepareStatement("SELECT * FROM USERS WHERE User_Name = ?");
			ps.setString(1, username);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {

				return rs.getString(1); // Returns the ID of the respective username

			}

		} catch (SQLException e) {

			e.printStackTrace();

		}

		return null; // Returns null, if for some reason no ID exists for the respective username
	}

	@Override
	public String queryFindUsernameByID(Integer id) {

		try {

			PreparedStatement ps = connection.prepareStatement("SELECT * FROM USERS WHERE id = ?");
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {

				return rs.getString(2); // Returns username for the respective ID

			}

		} catch (SQLException e) {

			e.printStackTrace();

		}

		return null; // Returns null, if no username is found for the respective ID
	}

	@Override
	public boolean queryValidateID(Integer id) {

		boolean status = false;

		try {

			PreparedStatement ps = connection.prepareStatement("SELECT * FROM users WHERE id = ?");
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {

				status = true;
				return status; // If ID exists in the user's table

			}

		} catch (SQLException e) {

			e.printStackTrace();

		}

		return status; // Error in executing the query OR ID does not exist in the user's table
	}

	@Override
	public int checkIfUserExists(String username, String email) {

		int userExists = 0;

		// Checks if username exists in the database

		try {

			PreparedStatement userPS = connection.prepareStatement("SELECT * FROM USERS WHERE User_Name = ?");
			userPS.setString(1, username);
			ResultSet UserRS = userPS.executeQuery();
			if (UserRS.next() && UserRS.getInt(1) > 0) {

				userExists = userExists + 1;

			}

			// Checks if email exists in the database

			PreparedStatement emailPS = connection.prepareStatement("SELECT * FROM USERS WHERE Email = ?");
			emailPS.setString(1, email);
			ResultSet emailRS = emailPS.executeQuery();

			if (emailRS.next() && emailRS.getInt(1) > 0) {

				userExists = userExists + 2;

			}

		} catch (SQLException e) {

			e.printStackTrace();

		}

		return userExists;
	}

	@Override
	public String queryInsertUser(String username, String email, String password) {

		if (checkIfUserExists(username, email) == 1) {

			return String.valueOf(1);

		}

		else if (checkIfUserExists(username, email) == 2) {

			return String.valueOf(2);

		}

		else if (checkIfUserExists(username, email) == 3) {

			return String.valueOf(3);

		}

		try {

			PreparedStatement ps = connection
					.prepareStatement("INSERT INTO USERS(USER_NAME, EMAIL, PASSWORD) VALUES (?, ?, ?)");
			ps.setString(1, username);
			ps.setString(2, email);
			ps.setString(3, password);

			ps.executeUpdate();

			return queryFindIDByEmail(email); // Fetches the user's ID from the users table and returns it to the server

		} catch (SQLException e) {

			e.printStackTrace();
			return null; // Error in adding new user

		}
	}

	@Override
	public int verifyLoginCredentials(String email, String password) {

		try {

			PreparedStatement ps = connection
					.prepareStatement("SELECT COUNT(*) FROM USERS WHERE Email = ? AND Password = ?");
			ps.setString(1, email);
			ps.setString(2, password);
			ResultSet rs = ps.executeQuery();
			rs.next();
			return rs.getInt(1);

		} catch (SQLException e) {

			e.printStackTrace();
			return 0;

		}
	}

	@Override
	public String queryGetUsername(String email) {

		try {

			PreparedStatement ps = connection.prepareStatement("SELECT User_Name FROM USERS WHERE Email = ?");
			ps.setString(1, email);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {

				return rs.getString(1);

			}

		} catch (SQLException e) {

			e.printStackTrace();
			return null;
		}

		return null;
	}

	@Override
	public List<Integer> queryListFriendsIDs(Integer id) {

		List<Integer> friendsIDs = new ArrayList<>();

		try {

			PreparedStatement ps = connection
					.prepareStatement("SELECT DISTINCT Receiver_ID FROM CHATS WHERE Sender_ID = ?");
			ps.setInt(1, id);

			ResultSet rs = ps.executeQuery();

			while (rs.next()) {

				int friendID = rs.getInt(1);
				friendsIDs.add(friendID);

			}

			return friendsIDs;

		} catch (SQLException e) {

			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void removeMessagesWithDots() {

		// We automatically send . to chats table when a new friend is added. The dots
		// will be removed once the number of messages gets greater than 2

		try {

			PreparedStatement ps = connection.prepareStatement("DELETE FROM chats WHERE message = ?");
			ps.setString(1, ".");

			ps.executeQuery();

		} catch (SQLException e) {

			e.printStackTrace();

		}
	}

	@Override
	public List<String[]> querySearchUsers(String searchString) {

		try {

			PreparedStatement ps = connection.prepareStatement("SELECT * FROM users WHERE User_Name LIKE ?");
			ps.setString(1, "%" + searchString + "%");
			ResultSet rs = ps.executeQuery();

			List<String[]> users = new ArrayList<>();

			while (rs.next()) {

				String userName = rs.getString("User_Name");
				String profilePicture = rs.getString("Profile_Picture");
				String[] user = { userName, profilePicture };
				users.add(user); // Returns the list of users

			}

			return users;

		} catch (SQLException e) {

			e.printStackTrace();
			return new ArrayList<>(); // Returns an empty list on error

		}
	}

	@Override
	public int queryChangeUsername(Integer id, String username) {

		if (queryValidateID(id) == false) {

			return 0; // ID does not exist in the database, therefore the username cannot be changed

		}

		try {

			PreparedStatement ps = connection.prepareStatement("UPDATE USERS SET User_Name = ? WHERE ID = ?");
			ps.setString(1, username);
			ps.setInt(2, id);
			int rowsUpdated = ps.executeUpdate();

			if (rowsUpdated > 0) {

				return 1; // Username successfully changed

			} else {

				return 0; // No rows were updated

			}

		} catch (SQLException e) {

			e.printStackTrace();
			return 0; // Error in executing the update statement

		}
	}

	@Override
	public int queryChangeEmail(Integer id, String email) {

		if (queryValidateID(id) == false) {

			return 0; // ID does not exist in the database, therefore the email cannot be changed

		}

		try {

			PreparedStatement ps = connection.prepareStatement("UPDATE USERS SET Email = ? WHERE ID = ?");
			ps.setString(1, email);
			ps.setInt(2, id);
			int rowsUpdated = ps.executeUpdate();

			if (rowsUpdated > 0) {

				return 1; // Email successfully updated

			}

			else {

				return 0;

			}

		} catch (SQLException e) {

			e.printStackTrace();
			return 0; // Error executing update

		}
	}

	@Override
	public int queryChangePassword(Integer id, String password) {

		if (queryValidateID(id) == false) {

			return 0; // ID does not exist in the database, therefore the password cannot be changed

		}

		try {

			PreparedStatement ps = connection.prepareStatement("UPDATE USERS SET Password = ? WHERE ID = ?");
			ps.setString(1, password);
			ps.setInt(2, id);
			int rowsUpdated = ps.executeUpdate();

			if (rowsUpdated > 0) {

				return 1; // Password successfully changed

			} else {

				return 0; // No rows were updated. This means that password was not changed

			}

		} catch (SQLException e) {

			e.printStackTrace();
			return 0; // Error in executing update statement

		}
	}

	@Override
	public int queryDeleteUser(Integer id) {

		if (queryValidateID(id) == false) {

			return 0; // ID does not exist in the database, therefore the user cannot be deleted

		}

		try {

			PreparedStatement ps = connection.prepareStatement("DELETE FROM USERS WHERE ID = ?");
			ps.setInt(1, id);
			int rowsDeleted = ps.executeUpdate();

			if (rowsDeleted > 0) {

				connection.commit();
				return 1; // User successfully deleted from the database

			} else {

				return 0; // No rows were deleted. This means the deletion of user was unsuccessful

			}

		} catch (SQLException e) {

			e.printStackTrace();
			return 0; // Error in executing delete statement

		}
	}

	@Override
	public int queryAddMessage(Integer senderID, String message, Integer receiverID, Timestamp time) {

		try {

			PreparedStatement ps = connection
					.prepareStatement("INSERT INTO chats(Sender_ID, Message, Receiver_ID, TIME) VALUES (?, ?, ?, ?)");
			ps.setInt(1, senderID);
			ps.setString(2, message);
			ps.setInt(3, receiverID);
			ps.setTimestamp(4, time);
			int rowsInserted = ps.executeUpdate();

			if (rowsInserted > 0) {

				return 1; // Message was successfully added to the database

			} else {

				return 0; // No rows were inserted

			}

		} catch (SQLException e) {

			e.printStackTrace();
			return 0; // Error in executing insert statement

		}
	}

	@Override
	public List<String> queryGetMessages(Integer id, String partner) {

		List<String> messages = new ArrayList<>();
		Integer partnerID = Integer.valueOf(queryFindIDByUsername(partner));

		String fullMessage = new String();
		List<String> timeStamps = new ArrayList<>();

		try {

			PreparedStatement ps = connection.prepareStatement(
					"SELECT * FROM chats WHERE Sender_ID = ? AND Receiver_ID = ? OR Receiver_ID = ? AND Sender_ID = ? ORDER BY Time;");
			ps.setInt(1, id);
			ps.setInt(2, partnerID);
			ps.setInt(3, id);
			ps.setInt(4, partnerID);
			ResultSet rs = ps.executeQuery();

			while (rs.next()) {

				String key = rs.getString("Sender_ID");
				String username = queryFindUsernameByID(Integer.valueOf(key));
				String message = rs.getString("message");
				String timestamp = rs.getString("time");
				System.out.println("TIME: " + timestamp);

				fullMessage = "[".concat(username + " " + timestamp.substring(11, 16)).concat("]")
						+ " [".concat(message).concat("]\t");

				System.out.println("FULL MESSAGE: " + fullMessage);
				System.out.println(username + " " + timestamp + ": " + message + "\n");

				timeStamps.add(timestamp + "\n");
				messages.add(fullMessage);

			}

			return messages;

		} catch (SQLException e) {

			e.printStackTrace();

			return messages; // Returns an empty list on error

		}
	}

	public int queryDeleteSelectedMessages(Integer senderID, Integer receiverID, List<Integer> messageID) {

		try {

			PreparedStatement ps = connection
					.prepareStatement("DELETE FROM chats WHERE Sender_ID = ? AND Receiver_ID = ? AND ID IN (?)");
			ps.setInt(1, senderID);
			ps.setInt(2, receiverID);
			ps.setArray(3, connection.createArrayOf("INTEGER", messageID.toArray()));
			ps.executeUpdate();
			return 1;

		} catch (SQLException e) {

			e.printStackTrace();
			return 0;

		}
	}

}
